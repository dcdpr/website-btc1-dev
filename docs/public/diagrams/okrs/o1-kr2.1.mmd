---
title: SingletonBeacon - Stuart Updates Keys, Satoshi Verifies
---

sequenceDiagram
    autonumber
    actor Stu as Stuart (DID Controller)
    participant BTC as Bitcoin Network â›“
    participant CAS as CAS/IPFS ðŸ“¦ (optional)
    actor Sat as Satoshi (Verifier)
    actor Res as Resolver

    Note over Stu: Prepare btcr2Update (new key material etc.)<br/>Compute updateId = SHA256(JCS(btcr2Update))

    Stu->>BTC: Construct spendTx with OP_RETURN PUSH32 btcr2Update
    BTC->>BTC: Sign spendTx (private key for serviceEndpoint)
    BTC->>BTC: Broadcast spendTx (OP_RETURN last output)
    alt CAS used
      Stu->>CAS: Publish btcr2Update (under its hash)
    else Sidecar used
      Stu->>Stu: Store btcr2Update locally
    end

    Note right of Sat: Wants to verify Stuart's latest DID

    Sat->>Res: Resolve did:btcr2:... (targetVersion? optional)
    Res->>BTC: Scan Beacon address from DID.service (SingletonBeacon)
    BTC-->>Res: Latest tx with OP_RETURN = updateId

    alt CAS path
      Res->>CAS: Get btcr2Update by updateId
      CAS-->>Res: btcr2Update
    else Sidecar path
      Sat->>Res: Provide sidecarDocuments=[btcr2Update]
      Res->>Stu: Load sidecarDocuments
    end

    Res->>Res: Validate btcr2Update hash==updateId<br/>Transform doc, check versionId increments, schema-valid
    Res-->>Sat: Resolved DID with new keys (verified)
