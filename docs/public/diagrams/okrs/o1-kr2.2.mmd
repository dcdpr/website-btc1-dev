---
title: MapBeacon - Stuart Updates Keys, Satoshi Verifies
---

sequenceDiagram
    autonumber
    actor Stu as Stuart (DID Controller)
    participant Agg as Beacon Aggregator
    participant Coh as MuSig2 Cohort (n-of-n)
    participant BTC as Bitcoin Network â›“
    actor Sat as Satoshi (Verifier)
    participant Res as Resolver
    participant CAS as CAS/IPFS ðŸ“¦ (optional)
    participant Side as Sidecar ðŸ§³

    Note over Stu: Compute index = H(did)<br/>Pick/advance nonce<br/>Optionally compute updateId = SHA256(JCS(btc1Update))

    par Submit (privacy)
      Stu-->>Agg: { index, (optional) updateId? }<br/>(no DID or raw update)
      Others-->>Agg: { indexáµ¢, (optional) updateIdáµ¢ }<br/><br/>
    end

    Agg->>Agg: Build optimized SMT from entries â†’ rootHash
    Agg->>Coh: Create unsigned spendTx(OP_RETURN PUSH32(rootHash))
    Coh->>Coh: Validate root & unsignedSpendTx (per Â§6.6.2.3 precheck)
    Coh->>BTC: Aggregate PSBTs â†’ final tx broadcast

    opt If update provided via CAS
      Stu->>CAS: Publish btc1Update by updateId
    end
    Stu->>Sat: Deliver smtProof {id=rootHash, nonce, (updateId?), path[]} via Sidecar
    Sat->>Res: Resolve did:btc1:...
    Res->>BTC: Read OP_RETURN rootHash from SMT Beacon address
    Sat->>Res: Provide smtProof via sidecar
    alt If updateId present
      Res->>CAS: Fetch btc1Update by updateId (or Sidecar)
    end

    Res->>Res: Verify path from index using nonce and (updateId?) â†’ rootHash (per Â§6.6.2.3)
    Res->>Res: If updateId present, apply btc1Update, else non-inclusion â†’ no update
    Res-->>Sat: Resolved DID (validated via SMT proof)
