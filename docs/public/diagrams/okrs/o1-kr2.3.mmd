---
title: SMTBeacon - Stuart Updates Keys, Satoshi Verifies
---

sequenceDiagram
    autonumber
    actor Stu as Stuart (Beacon Participant)
    participant Agg as Beacon Aggregator
    participant Coh as MuSig2 Cohort (n-of-n)
    participant BTC as Bitcoin Network â›“
    participant CAS as CAS/IPFS ðŸ“¦
    actor Sat as Satoshi (Verifier)
    participant Res as Resolver
    participant Side as Sidecar ðŸ§³

    Note over Stu: Prepare btcr2Update<br/>Compute updateId = SHA256(JCS(btcr2Update))

    par Submit updates
      Stu-->>Agg: { did, updateId | btcr2Update }
      Note right of Stu: If btcr2Update sent, Agg will hash to updateId
      Others-->>Agg: { didáµ¢, updateIdáµ¢ | btcr2Updateáµ¢ }
    end

    Agg->>Agg: Build beaconAnnouncementMap - {did â†’ updateId}
    Agg->>Agg: mapHash = SHA256(JCS(map))
    Agg->>Coh: Unsigned spendTx(OP_RETURN PUSH32(mapHash))
    Coh->>Coh: Validate map & unsignedSpendTx (Â§6.5.2.3)
    Coh->>BTC: Aggregate PSBTs â†’ broadcast spendTx

    Agg->>CAS: Publish map (by mapHash)
    par Publish updates
      Agg->>CAS: Publish btcr2Update for each entry (if provided)
      Stu->>CAS: Publish own btcr2Update (if not already)
    end

    Sat->>Res: Resolve did:btcr2:...
    Res->>BTC: Read OP_RETURN mapHash from Map Beacon address
    alt CAS path
      Res->>CAS: Get map by mapHash
      Res->>CAS: Get btcr2Update by map[did]
    else Sidecar path
      Sat->>Res: Provide map & btcr2Update via sidecar
    end

    Res->>Res: Validate hashes, apply btcr2Update, version checks
    Res-->>Sat: Resolved DID (verified via Map Beacon)
